---
name: CI/CD

on:
  pull_request:
    branches: ['main']
    paths-ignore:
      - '**/*.md'
    types:
      - synchronize
      - opened
  push:
    branches: ['*']
    paths-ignore:
      - '**/*.md'

env:
  IMAGE_NAME: bpcalc
  AWS_REGION: eu-west-1
  WORKSPACE: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'prod' }}

jobs:
  ci:
    name: Continous Integration
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Install poetry
        run: pipx install poetry==1.2.2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: poetry install
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v2

      - name: Run linter
        run: poetry run flake8 .
      
      - name: Run Trivy vulnerability scanner (file system)
        uses: aquasecurity/trivy-action@0.8.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          security-checks: vuln,secret,config

      - name: Run unit tests
        run: |
          poetry run coverage run --source=bpcalc -m pytest tests/unit
          poetry run coverage report --fail-under=80
      
      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get image metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},enable={{is_default_branch}}
            type=semver,pattern={{major}}.{{minor}},enable={{is_default_branch}}
            type=semver,pattern={{major}},enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
            type=ref,event=pr
          flavor: |
            latest=false
    
      - name: Container image build
        id: build
        uses: docker/build-push-action@v3
        with:
          push: ${{ (github.event_name == 'pull_request') || (github.ref_name == 'main') }}
          platforms: linux/amd64,linux/arm64
          context: .
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha

  cd:
    name: Continous Deployment
    if: (github.event_name == 'pull_request') || (github.ref_name == 'main')
    runs-on: ubuntu-22.04
    needs: ci
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.4
          terraform_wrapper: false # Required for 'terraform output' to be captureed correctly
      
      - name: Deploy Infrastructure
        id: deploy
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG=sha-$SHORT_SHA
          terraform init
          terraform workspace new ${{ env.WORKSPACE }} || true
          terraform workspace select ${{ env.WORKSPACE }}
          terraform plan \
          -var='image=${{ secrets.AWS_ACCOUNT }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}' \
          -var="tag=$TAG" \
          -var='region=${{ env.AWS_REGION }}' \
          -out=tfplan.json
          terraform apply tfplan.json
          echo "url=$(terraform output -raw url)" >> $GITHUB_OUTPUT
        working-directory: ./infra
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  test:
    name: QA Testing
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    needs: cd
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry==1.2.2

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install
          poetry run playwright install
      
      - name: Run E2E tests
        run: poetry run pytest --base-url ${{ needs.cd.outputs.url }} tests/e2e
      
      - name: Run ZAP scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: '${{ needs.cd.outputs.url }}'
          cmd_options: '-l WARN'
          fail_action: true
          rules_file_name: 'zap-rules.tsv'
      
      - name: Run k6 local load test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: tests/load_test.js
        env:
          URL: ${{ needs.cd.outputs.url }}